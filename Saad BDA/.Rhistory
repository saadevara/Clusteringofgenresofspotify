# Continue similarly for other analyses
# Continue similarly for other analyses
# Continue similarly for other analyses
# Continue similarly for other analyses
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the data
data <- read.csv('spotify_data.csv')
data.head()
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the data
data <- read.csv('spotify_data.csv')
data.head
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the data
data <- read.csv('spotify_data.csv')
head(data)
# Select relevant features
features <- data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
data$cluster <- cluster_labels
# Cluster analysis
cluster_analysis <- data %>% group_by(cluster) %>% summarise(genres = toString(unique(genre)))
# Display cluster analysis
print(cluster_analysis)
# Top 10 Most Listened Genres
genre_counts <- table(data$genre)
top_10_genres <- names(sort(genre_counts, decreasing = TRUE)[1:10])
# Plot top 10 most listened genres
barplot(genre_counts[top_10_genres], main = 'Top 10 Most Listened Genres', xlab = 'Genre', ylab = 'Count', las = 2, cex.names = 0.7)
# Top 10 Least Listened Genres
genre_counts_tail <- table(data$genre)
bottom_10_genres <- names(sort(genre_counts_tail)[1:10])
# Plot top 10 least listened genres
barplot(genre_counts_tail[bottom_10_genres], main = 'Top 10 Least Listened Genres', xlab = 'Genre', ylab = 'Count', las = 2, cex.names = 0.7)
# Top Genres by Energy and Danceability
sorted_data <- data[order(-data$energy, -data$danceability), ]
top_20_data <- head(sorted_data, 20)
# Plot top genres by energy and danceability
par(mfrow = c(1, 1))
barplot(top_20_data$energy, names.arg = top_20_data$genre, col = 'blue', main = 'Top Genres by Energy and Danceability', xlab = 'Value', ylab = 'Genre', ylim = c(0, 1))
barplot(top_20_data$danceability, add = TRUE, col = 'orange')
# Top 20 Artists
top_20_artists <- table(data$artist_name)[1:20]
# Plot top 20 artists
barplot(top_20_artists, main = 'Top 20 Artists', xlab = 'Artist', ylab = 'Frequency', las = 2, cex.names = 0.7)
# Top Artists in Top 10 Genres
top_10_genres <- names(sort(genre_counts, decreasing = TRUE)[1:10])
for (genre in top_10_genres) {
cat(paste("Genre: ", genre, "\n"))
cat("Top Artists:\n")
genre_artist_counts <- table(data[data$genre == genre, ]$artist_name)
print(head(genre_artist_counts, 2))
cat("\n")
}
# Top Genres by Highest Average Tempo
genre_avg_tempo <- data %>% group_by(genre) %>% summarise(avg_tempo = mean(tempo))
top_genres <- genre_avg_tempo %>% arrange(desc(avg_tempo)) %>% head(10)
# Plot top genres by highest average tempo
barplot(top_genres$avg_tempo, names.arg = top_genres$genre, main = 'Top Genres by Highest Average Tempo', xlab = 'Genre', ylab = 'Average Tempo')
# Top Genres by Lowest Average Tempo
top_genres_low_tempo <- genre_avg_tempo %>% arrange(avg_tempo) %>% head(10)
# Plot top genres by lowest average tempo
barplot(top_genres_low_tempo$avg_tempo, names.arg = top_genres_low_tempo$genre, main = 'Top Genres by Lowest Average Tempo', xlab = 'Genre', ylab = 'Average Tempo')
es
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
# Select relevant features
features <- data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
data <- read.csv('spotify_data.csv')
set.seed(123)  # Set seed for reproducibility
sample_size <- 1000  # Adjust the sample size as needed
sampled_data <- data[sample(nrow(data), sample_size), ]
# Select relevant features
features <- data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
gc()
gc()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
data <- read.csv('spotify_data.csv')
set.seed(123)  # Set seed for reproducibility
sample_size <- 1000  # Adjust the sample size as needed
sampled_data <- data[sample(nrow(data), sample_size), ]
# Select relevant features
features <- data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
data <- read.csv('spotify_data.csv')
set.seed(123)  # Set seed for reproducibility
sample_size <- 1000  # Adjust the sample size as needed
sampled_data <- data[sample(nrow(data), sample_size), ]
# Select relevant features
features <- data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
# 3D Cluster Plot
plot_ly(data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster, type = "scatter3d", mode = "markers",
marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
# Perform KMeans clustering for different values of k
wcss <- numeric(10)  # Set an arbitrary maximum value of k (adjust as needed)
for (i in 1:10) {
kmeans_model <- kmeans(scaled_features, centers = i, nstart = 20)
wcss[i] <- sum(kmeans_model$withinss)
}
gc()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
data <- read.csv('spotify_data.csv')
set.seed(123)  # Set seed for reproducibility
# Select relevant features
features <- data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
# Read the data
data <- read.csv('spotify_data.csv')
# Set seed for reproducibility
set.seed(123)
# Adjust the sample size as needed
sample_size <- 1000
sampled_data <- data[sample(nrow(data), sample_size), ]
# Select relevant features
features <- sampled_data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
sampled_data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(sampled_data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
gc()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(plotly)
library(factoextra)
# Read the data
data <- read.csv('spotify_data.csv')
# Set seed for reproducibility
set.seed(123)
# Adjust the sample size as needed
sample_size <- 1000
sampled_data <- data[sample(nrow(data), sample_size), ]
# Select relevant features
features <- sampled_data[, c('danceability', 'energy', 'key')]
# Standardize the features
scaled_features <- scale(features)
# Perform KMeans clustering
kmeans_model <- kmeans(scaled_features, centers = 3, nstart = 20)
cluster_labels <- kmeans_model$cluster
sampled_data$cluster <- factor(cluster_labels)
# 3D Cluster Plot
cluster_plot <- plot_ly(sampled_data, x = ~danceability, y = ~energy, z = ~key, color = ~cluster,
type = "scatter3d", mode = "markers", marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')))
print(cluster_plot)
# Elbow Diagram
elbow_plot <- fviz_nbclust(scaled_features, kmeans, method = "wss") +
labs(title = "Elbow Diagram for KMeans Clustering")
print(elbow_plot)
# Top 10 Most Listened Genres
genre_counts <- table(data$genre)
top_10_genres <- names(sort(genre_counts, decreasing = TRUE)[1:10])
# Plot top 10 most listened genres
barplot(genre_counts[top_10_genres], col = rainbow(length(top_10_genres)),
main = 'Top 10 Most Listened Genres', xlab = 'Genre', ylab = 'Count', las = 2, cex.names = 0.7)
# Top 10 Least Listened Genres
genre_counts_tail <- table(data$genre)
bottom_10_genres <- names(sort(genre_counts_tail)[1:10])
# Plot top 10 least listened genres
barplot(genre_counts_tail[bottom_10_genres], col = rainbow(length(bottom_10_genres)),
main = 'Top 10 Least Listened Genres', xlab = 'Genre', ylab = 'Count', las = 2, cex.names = 0.7)
# Top Genres by Highest Average Instrumentalness
genre_avg_instrumentalness <- data %>% group_by(genre) %>% summarise(avg_instrumentalness = mean(instrumentalness))
top_genres_inst_high <- genre_avg_instrumentalness %>% arrange(desc(avg_instrumentalness)) %>% head(10)
# Plot top genres by highest average instrumentalness
barplot(top_genres_inst_high$avg_instrumentalness, col = rainbow(length(top_genres_inst_high)),
names.arg = top_genres_inst_high$genre, main = 'Top Genres by Highest Average Instrumentalness',
xlab = 'Genre', ylab = 'Average Instrumentalness')
# Top Genres by Lowest Average Instrumentalness
top_genres_inst_low <- genre_avg_instrumentalness %>% arrange(avg_instrumentalness) %>% head(10)
# Plot top genres by lowest average instrumentalness
barplot(top_genres_inst_low$avg_instrumentalness, col = rainbow(length(top_genres_inst_low)),
names.arg = top_genres_inst_low$genre, main = 'Top Genres by Lowest Average Instrumentalness',
xlab = 'Genre', ylab = 'Average Instrumentalness')
# Top Genres by Highest Average Acousticness
genre_avg_acousticness <- data %>% group_by(genre) %>% summarise(avg_acousticness = mean(acousticness))
top_genres_acoustic_high <- genre_avg_acousticness %>% arrange(desc(avg_acousticness)) %>% head(10)
# Plot top genres by highest average acousticness
barplot(top_genres_acoustic_high$avg_acousticness, col = rainbow(length(top_genres_acoustic_high)),
names.arg = top_genres_acoustic_high$genre, main = 'Top Genres by Highest Average Acousticness',
xlab = 'Genre', ylab = 'Average Acousticness')
# Top Genres by Lowest Average Acousticness
top_genres_acoustic_low <- genre_avg_acousticness %>% arrange(avg_acousticness) %>% head(10)
# Plot top genres by lowest average acousticness
barplot(top_genres_acoustic_low$avg_acousticness, col = rainbow(length(top_genres_acoustic_low)),
names.arg = top_genres_acoustic_low$genre, main = 'Top Genres by Lowest Average Acousticness',
xlab = 'Genre', ylab = 'Average Acousticness')
# Top Genres by Highest Average Speechiness
genre_avg_speechiness <- data %>% group_by(genre) %>% summarise(avg_speechiness = mean(speechiness))
top_genres_speechiness_high <- genre_avg_speechiness %>% arrange(desc(avg_speechiness)) %>% head(10)
# Plot top genres by highest average speechiness
barplot(top_genres_speechiness_high$avg_speechiness, col = rainbow(length(top_genres_speechiness_high)),
names.arg = top_genres_speechiness_high$genre, main = 'Top Genres by Highest Average Speechiness',
xlab = 'Genre', ylab = 'Average Speechiness')
# Top Genres by Lowest Average Speechiness
top_genres_speechiness_low <- genre_avg_speechiness %>% arrange(avg_speechiness) %>% head(10)
# Plot top genres by lowest average speechiness
barplot(top_genres_speechiness_low$avg_speechiness, col = rainbow(length(top_genres_speechiness_low)),
names.arg = top_genres_speechiness_low$genre, main = 'Top Genres by Lowest Average Speechiness',
xlab = 'Genre', ylab = 'Average Speechiness')
# Scatter Plot Matrix
scatter_matrix <- plotly::plot_ly(sampled_data, type = "scatter", mode = "markers",
marker = list(size = 5, color = ~cluster)) %>%
layout(title = "Scatter Plot Matrix",
xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'))
print(scatter_matrix)
# Density Plot for Danceability
density_plot_danceability <- ggplot(sampled_data, aes(x = danceability, fill = as.factor(cluster))) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot for Danceability by Cluster",
x = "Danceability",
y = "Density") +
theme_minimal()
print(density_plot_danceability)
# Boxplot for Energy by Cluster
boxplot_energy <- ggplot(sampled_data, aes(x = as.factor(cluster), y = energy, fill = as.factor(cluster))) +
geom_boxplot() +
labs(title = "Boxplot for Energy by Cluster",
x = "Cluster",
y = "Energy") +
theme_minimal()
print(boxplot_energy)
# Barplot for Key by Cluster
barplot_key <- ggplot(sampled_data, aes(x = as.factor(cluster), fill = as.factor(key))) +
geom_bar() +
labs(title = "Barplot for Key by Cluster",
x = "Cluster",
y = "Count") +
theme_minimal()
print(barplot_key)
# Pairwise Scatter Plots by Cluster
pairs_plot <- plot_ly(sampled_data, type = "scatter", mode = "markers",
marker = list(size = 5, color = ~cluster),
dimensions = list(
list(label = 'Danceability', values = ~danceability),
list(label = 'Energy', values = ~energy),
list(label = 'Key', values = ~key)
)) %>%
layout(title = "Pairwise Scatter Plots by Cluster")
print(pairs_plot)
# Density Plot for Danceability
density_plot_danceability <- ggplot(sampled_data, aes(x = danceability, fill = as.factor(cluster))) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot for Danceability by Cluster",
x = "Danceability",
y = "Density") +
theme_minimal()
print(density_plot_danceability)
# Boxplot for Energy by Cluster
boxplot_energy <- ggplot(sampled_data, aes(x = as.factor(cluster), y = energy, fill = as.factor(cluster))) +
geom_boxplot() +
labs(title = "Boxplot for Energy by Cluster",
x = "Cluster",
y = "Energy") +
theme_minimal()
print(boxplot_energy)
# Barplot for Key by Cluster
barplot_key <- ggplot(sampled_data, aes(x = as.factor(cluster), fill = as.factor(key))) +
geom_bar() +
labs(title = "Barplot for Key by Cluster",
x = "Cluster",
y = "Count") +
theme_minimal()
print(barplot_key)
# Pairwise Scatter Plots by Cluster
pairs_plot <- plot_ly(sampled_data, type = "scatter", mode = "markers",
marker = list(size = 5, color = ~cluster),
dimensions = list(
list(label = 'Danceability', values = ~danceability),
list(label = 'Energy', values = ~energy),
list(label = 'Key', values = ~key)
)) %>%
layout(title = "Pairwise Scatter Plots by Cluster")
# Pairwise 3D Scatter Plots by Cluster
pairs_3d_plot <- plot_ly(sampled_data, x = ~danceability, y = ~energy, z = ~key,
color = ~cluster, type = "scatter3d", mode = "markers",
marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')),
title = "Pairwise 3D Scatter Plots by Cluster")
print(pairs_3d_plot)
# Heatmap for Correlation Matrix
cor_matrix <- cor(sampled_data[, c('danceability', 'energy', 'key')])
heatmap_plot <- plot_ly(z = cor_matrix, type = "heatmap", colorscale = "Viridis",
x = colnames(cor_matrix), y = colnames(cor_matrix),
showscale = FALSE) %>%
layout(title = "Correlation Matrix Heatmap")
print(heatmap_plot)
# Violin Plot for Danceability and Energy by Cluster
violin_plot <- ggplot(sampled_data, aes(x = as.factor(cluster), y = danceability, fill = as.factor(cluster))) +
geom_violin() +
labs(title = "Violin Plot for Danceability by Cluster",
x = "Cluster",
y = "Danceability") +
theme_minimal()
print(violin_plot)
# Pairwise 3D Scatter Plots by Cluster
pairs_3d_plot <- plot_ly(sampled_data, x = ~danceability, y = ~energy, z = ~key,
color = ~cluster, type = "scatter3d", mode = "markers",
marker = list(size = 5)) %>%
layout(scene = list(xaxis = list(title = 'Danceability'),
yaxis = list(title = 'Energy'),
zaxis = list(title = 'Key')),
title = "Pairwise 3D Scatter Plots by Cluster")
print(pairs_3d_plot)
# Heatmap for Correlation Matrix
cor_matrix <- cor(sampled_data[, c('danceability', 'energy', 'key')])
heatmap_plot <- plot_ly(z = cor_matrix, type = "heatmap", colorscale = "Viridis",
x = colnames(cor_matrix), y = colnames(cor_matrix),
showscale = FALSE) %>%
layout(title = "Correlation Matrix Heatmap")
print(heatmap_plot)
# Heatmap for Correlation Matrix
cor_matrix <- cor(sampled_data[, c('danceability', 'energy', 'key')])
heatmap_plot <- plot_ly(z = cor_matrix,
type = "heatmap",
colorscale = "Viridis",
x = colnames(cor_matrix),
y = colnames(cor_matrix),
colorbar = list(title = 'Correlation', tickvals = c(-1, 0, 1), ticktext = c('-1', '0', '1')),
showscale = TRUE) %>%
layout(title = "Correlation Matrix Heatmap")
print(heatmap_plot)
df$year <- as.integer(format(as.Date(df$year, format='%Y'), "%Y"))
genre_analysis_and_trends <- function() {
genre_counts <- table(df$year, df$genre)
matplot(row.names(genre_counts), genre_counts, type='l', col=1:ncol(genre_counts), lty=1, lwd=2, xlab='Year', ylab='Number of Songs', main='Genre Distribution Over the Years')
legend('topright', legend=colnames(genre_counts), fill=1:ncol(genre_counts), title='Genre')
}
key_column <- 'key'
key_analysis <- function() {
key_counts <- table(df[[key_column]])
barplot(key_counts, col='skyblue', main='Key Analysis', xlab='Key', ylab='Number of Songs', names.arg=LETTERS[1:12], ylim=c(0, max(key_counts) + 10))
grid()
}
mode_column <- 'mode'
mode_analysis_pie_chart <- function() {
mode_counts <- table(df[[mode_column]])
pie(mode_counts, labels=c('Major', 'Minor'), col=c('skyblue', 'lightcoral'), main='Mode Analysis (Pie Chart)', cex.main=0.8)
}
genre_analysis_and_trends()
key_analysis()
mode_analysis_pie_chart()
data$year <- as.integer(format(as.Date(df$year, format='%Y'), "%Y"))
data$year <- as.integer(format(as.Date(data$year, format='%Y'), "%Y"))
genre_counts <- table(data$year, df$genre)
data$year <- as.integer(format(as.Date(data$year, format='%Y'), "%Y"))
genre_analysis_and_trends <- function() {
genre_counts <- table(data$year, data$genre)
matplot(row.names(genre_counts), genre_counts, type='l', col=1:ncol(genre_counts), lty=1, lwd=2, xlab='Year', ylab='Number of Songs', main='Genre Distribution Over the Years')
legend('topright', legend=colnames(genre_counts), fill=1:ncol(genre_counts), title='Genre')
}
key_column <- 'key'
key_analysis <- function() {
key_counts <- table(df[[key_column]])
barplot(key_counts, col='skyblue', main='Key Analysis', xlab='Key', ylab='Number of Songs', names.arg=LETTERS[1:12], ylim=c(0, max(key_counts) + 10))
grid()
}
mode_column <- 'mode'
mode_analysis_pie_chart <- function() {
mode_counts <- table(df[[mode_column]])
pie(mode_counts, labels=c('Major', 'Minor'), col=c('skyblue', 'lightcoral'), main='Mode Analysis (Pie Chart)', cex.main=0.8)
}
genre_analysis_and_trends()
key_analysis()
head.(data)
head.(data)
head(data)
# Genre analysis and trends
genre_counts <- table(sampled_data$year, sampled_data$genre)
matplot(row.names(genre_counts), genre_counts, type='l', col=1:ncol(genre_counts), lty=1, lwd=2, xlab='Year', ylab='Number of Songs', main='Genre Distribution Over the Years')
legend('topright', legend=colnames(genre_counts), fill=1:ncol(genre_counts), title='Genre')
# Key analysis
key_counts <- table(sampled_data$key)
barplot(key_counts, col='skyblue', main='Key Analysis', xlab='Key', ylab='Number of Songs', names.arg=LETTERS[1:12], ylim=c(0, max(key_counts) + 10))
grid()
# Mode analysis pie chart
mode_counts <- table(sampled_data$mode)
pie(mode_counts, labels=c('Major', 'Minor'), col=c('skyblue', 'lightcoral'), main='Mode Analysis (Pie Chart)', cex.main=0.8)
